{
    "ModuleName": "i0_my_kernel_1",
    "SourceFileName": "/home/users/edoardo.dalessio/code/av_omega/VersalAutomationTemplate/aie/src/my_kernel_1.cpp",
    "StructTypes": [
        {
            "Name": "class.anon",
            "Size": 1
        },
        {
            "Name": "struct.input_stream",
            "Size": 4
        },
        {
            "Name": "union.anon",
            "Size": 4
        },
        {
            "Name": "struct.output_stream",
            "Size": 4
        },
        {
            "Name": "union.anon.0",
            "Size": 4
        },
        {
            "Name": "class.aie::detail::vector",
            "Size": 16
        },
        {
            "Name": "struct.v4int32",
            "Size": 16
        },
        {
            "Name": "struct.ipd.custom_type.v16int8.v16int8",
            "Size": 16
        },
        {
            "Name": "class.aie::detail::vector.1",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::array",
            "Size": 128
        },
        {
            "Name": "struct.v64uint8",
            "Size": 64
        },
        {
            "Name": "struct.ipd.custom_type.v64int8.v64int8",
            "Size": 64
        },
        {
            "Name": "class.aie::detail::mask",
            "Size": 16
        },
        {
            "Name": "struct.std::__2::array.2",
            "Size": 16
        },
        {
            "Name": "class.aie::detail::vector_elem_ref",
            "Size": 8
        },
        {
            "Name": "class.aie::detail::vector.11",
            "Size": 64
        },
        {
            "Name": "struct.v32int16",
            "Size": 64
        },
        {
            "Name": "class.aie::detail::vector.8",
            "Size": 64
        },
        {
            "Name": "class.aie::detail::vector.3",
            "Size": 16
        },
        {
            "Name": "struct.v8int16",
            "Size": 16
        },
        {
            "Name": "class.aie::detail::vector.6",
            "Size": 16
        },
        {
            "Name": "struct.v16uint8",
            "Size": 16
        },
        {
            "Name": "struct.input_stream.4",
            "Size": 4
        },
        {
            "Name": "union.anon.5",
            "Size": 4
        },
        {
            "Name": "class.aie::detail::vector.7",
            "Size": 64
        },
        {
            "Name": "struct.v8cint32",
            "Size": 64
        },
        {
            "Name": "class.aie::detail::vector.9",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::array.10",
            "Size": 128
        },
        {
            "Name": "struct.ipd.custom_type.uint1_t.uint1_t",
            "Size": 1
        },
        {
            "Name": "struct.me_primitive::chessout_v4int32_stream_read128___PWSS_rsrc1__sint_uint1_t___sint",
            "Size": 20
        },
        {
            "Name": "struct.me_primitive::chessout_v4int32_stream_read128___PWSS_rsrc2__sint_uint1_t___sint",
            "Size": 20
        },
        {
            "Name": "struct.me_primitive::chessout_v4int32_stream_read128___PWSSMEM__sint_uint1_t___sint",
            "Size": 20
        },
        {
            "Name": "struct.output_stream.12",
            "Size": 4
        },
        {
            "Name": "union.anon.13",
            "Size": 4
        },
        {
            "Name": "struct.aie::detail::utils::pack2",
            "Size": 2
        },
        {
            "Name": "class.aie::detail::vector.14",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::array.15",
            "Size": 128
        },
        {
            "Name": "class.aie::detail::vector_elem_const_ref",
            "Size": 8
        },
        {
            "Name": "class.std::__2::tuple",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::__tuple_impl",
            "Size": 128
        },
        {
            "Name": "class.std::__2::__tuple_leaf",
            "Size": 64
        },
        {
            "Name": "class.std::__2::__tuple_leaf.16",
            "Size": 64
        },
        {
            "Name": "struct.std::__2::__tuple_indices",
            "Size": 1
        },
        {
            "Name": "struct.std::__2::__tuple_types",
            "Size": 1
        },
        {
            "Name": "struct.std::__2::__tuple_indices.17",
            "Size": 1
        },
        {
            "Name": "struct.std::__2::__tuple_types.18",
            "Size": 1
        },
        {
            "Name": "class.aie::detail::vector.19",
            "Size": 32
        },
        {
            "Name": "struct.v8int32",
            "Size": 32
        },
        {
            "Name": "struct.ipd.custom_type.v32int8.v32int8",
            "Size": 32
        },
        {
            "Name": "class.aie::detail::vector.20",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::array.21",
            "Size": 128
        },
        {
            "Name": "struct.v16int32",
            "Size": 64
        },
        {
            "Name": "class.std::__2::tuple.22",
            "Size": 128
        },
        {
            "Name": "struct.std::__2::__tuple_impl.23",
            "Size": 128
        },
        {
            "Name": "class.std::__2::__tuple_leaf.24",
            "Size": 32
        },
        {
            "Name": "class.std::__2::__tuple_leaf.25",
            "Size": 32
        },
        {
            "Name": "class.std::__2::__tuple_leaf.26",
            "Size": 32
        },
        {
            "Name": "class.std::__2::__tuple_leaf.27",
            "Size": 32
        },
        {
            "Name": "struct.std::__2::__tuple_indices.28",
            "Size": 1
        },
        {
            "Name": "struct.std::__2::__tuple_types.29",
            "Size": 1
        },
        {
            "Name": "class.aie::detail::mask.30",
            "Size": 8
        },
        {
            "Name": "struct.std::__2::array.31",
            "Size": 8
        },
        {
            "Name": "class.std::__2::tuple.32",
            "Size": 64
        },
        {
            "Name": "struct.std::__2::__tuple_impl.33",
            "Size": 64
        },
        {
            "Name": "class.std::__2::__tuple_leaf.34",
            "Size": 32
        },
        {
            "Name": "class.aie::detail::vector.35",
            "Size": 32
        },
        {
            "Name": "struct.v32uint8",
            "Size": 32
        },
        {
            "Name": "class.std::__2::__tuple_leaf.36",
            "Size": 32
        },
        {
            "Name": "struct.std::__2::integer_sequence",
            "Size": 1
        },
        {
            "Name": "struct.v4cint32",
            "Size": 32
        },
        {
            "Name": "struct.std::__2::__tuple_types.37",
            "Size": 1
        },
        {
            "Name": "struct.v64int16",
            "Size": 128
        },
        {
            "Name": "struct.ipd.custom_type.v128int8.v128int8",
            "Size": 128
        },
        {
            "Name": "__tuple_leaf<1, aie::detail::vector<unsigned char, 32>, false>",
            "Size": 32
        },
        {
            "Name": "tuple<aie::detail::vector<unsigned char, 32>, aie::detail::vector<unsigned char, 32> >",
            "Size": 64
        },
        {
            "Name": "vector<unsigned char, 32>",
            "Size": 32
        },
        {
            "Name": "mask<64>",
            "Size": 8
        },
        {
            "Name": "__tuple_leaf<3, aie::detail::vector<int, 8>, false>",
            "Size": 32
        },
        {
            "Name": "tuple<aie::detail::vector<int, 8>, aie::detail::vector<int, 8>, aie::detail::vector<int, 8>, aie::detail::vector<int, 8> >",
            "Size": 128
        },
        {
            "Name": "vector<int, 32>",
            "Size": 128
        },
        {
            "Name": "vector<int, 8>",
            "Size": 32
        },
        {
            "Name": "__tuple_leaf<1, aie::detail::vector<short, 32>, false>",
            "Size": 64
        },
        {
            "Name": "vector<int, 4>",
            "Size": 16
        },
        {
            "Name": "__tuple_leaf<0, aie::detail::vector<int, 8>, false>",
            "Size": 32
        },
        {
            "Name": "vector<short, 32>",
            "Size": 64
        },
        {
            "Name": "__tuple_leaf<2, aie::detail::vector<int, 8>, false>",
            "Size": 32
        },
        {
            "Name": "vector<short, 64>",
            "Size": 128
        },
        {
            "Name": "vector<unsigned char, 128>",
            "Size": 128
        },
        {
            "Name": "mask<128>",
            "Size": 16
        },
        {
            "Name": "vector<short, 8>",
            "Size": 16
        },
        {
            "Name": "__tuple_leaf<1, aie::detail::vector<int, 8>, false>",
            "Size": 32
        },
        {
            "Name": "tuple<aie::detail::vector<short, 32>, aie::detail::vector<short, 32> >",
            "Size": 128
        },
        {
            "Name": "vector<unsigned char, 16>",
            "Size": 16
        },
        {
            "Name": "vector_elem_const_ref<short, 32>",
            "Size": 8
        },
        {
            "Name": "vector<cint32, 8>",
            "Size": 64
        },
        {
            "Name": "vector<unsigned char, 64>",
            "Size": 128
        },
        {
            "Name": "vector<cint32, 16>",
            "Size": 128
        },
        {
            "Name": "__tuple_leaf<0, aie::detail::vector<unsigned char, 32>, false>",
            "Size": 32
        },
        {
            "Name": "__tuple_leaf<0, aie::detail::vector<short, 32>, false>",
            "Size": 64
        },
        {
            "Name": "vector_elem_ref<short, 32>",
            "Size": 8
        }
    ],
    "Globals": [
        {
            "Name": "me_primitive::ss0",
            "MangledName": "_ZN12me_primitive3ss0E",
            "Size": 4,
            "SoftFloat": false
        },
        {
            "Name": "me_primitive::ss1",
            "MangledName": "_ZN12me_primitive3ss1E",
            "Size": 4,
            "SoftFloat": false
        },
        {
            "Name": "me_primitive::ms0",
            "MangledName": "_ZN12me_primitive3ms0E",
            "Size": 4,
            "SoftFloat": false
        },
        {
            "Name": "me_primitive::ms1",
            "MangledName": "_ZN12me_primitive3ms1E",
            "Size": 4,
            "SoftFloat": false
        },
        {
            "Name": "ZERO",
            "Size": 32,
            "SoftFloat": false
        },
        {
            "Name": "__const._ZN3aie6detail17add_sub_bits_implILj16EsLj64ELNS0_15AddSubOperationE0EE3runERKNS0_6vectorIsLj64EEES7_.op",
            "Size": 1,
            "SoftFloat": false
        }
    ],
    "UsesCmathStaticVars": false,
    "Functions": [
        {
            "FunctionName": "aie::detail::vector<unsigned char, 16u>::operator v16uint8() const",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "my_kernel_function(input_stream<unsigned char>*, input_stream<unsigned char>*, output_stream<int>*)",
            "StackSize": 5437,
            "SoftFloat": false
        },
        {
            "FunctionName": "void writeincr<(aie_stream_resource_out)0, int, 4u>(output_stream<int>*, aie::detail::vector<int, 4u> const&)",
            "StackSize": 244,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<aie::detail::vector<unsigned char, 128u>::size()> aie::neq<aie::detail::vector<unsigned char, 128u>, aie::detail::vector<unsigned char, 128u> >(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2121,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 4u>::vector()",
            "StackSize": 36,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 4u>::set(int, unsigned int)",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u> readincr_v<128u, (aie_stream_resource_in)0, unsigned char>(input_stream<unsigned char>*)",
            "StackSize": 1752,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u>::get(unsigned int) const",
            "StackSize": 620,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<aie::operand_base_type<aie::detail::utils::remove_all<unsigned char>::type>::type, 128u> aie::broadcast<unsigned char, 128u>(unsigned char)",
            "StackSize": 1481,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::mask(bool)",
            "StackSize": 21,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u> aie::zeros<unsigned char, 128u>()",
            "StackSize": 1024,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie_dm_resource_remove<aie::detail::vector<unsigned char, 128u> >::type aie::add<aie::detail::vector<unsigned char, 128u>, aie::detail::vector<unsigned char, 128u> >(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 3001,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<aie::detail::vector<unsigned char, 128u>::size()> aie::eq<aie::detail::vector<unsigned char, 128u>, aie::detail::vector<unsigned char, 128u> >(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2161,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::count() const",
            "StackSize": 20,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::operator&(aie::detail::mask<128u> const&) const",
            "StackSize": 49,
            "SoftFloat": false
        },
        {
            "FunctionName": "bool aie::detail::utils::is_same_object<aie::detail::vector<unsigned char, 128u>, aie::detail::vector<unsigned char, 128u> >(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<unsigned int, 4u>::operator[](unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::vector_cast<unsigned char, aie::detail::vector<short, 8u> >(aie::detail::vector<short, 8u> const&)",
            "StackSize": 176,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<int, 4u>::undef()",
            "StackSize": 32,
            "SoftFloat": false
        },
        {
            "FunctionName": "upd_elem(v4int32, unsigned int, int)",
            "StackSize": 40,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::adf::stream_in_helper<128u, unsigned char, (aie_stream_resource_in)0>::readincr(input_stream<unsigned char>*)",
            "StackSize": 1748,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u> aie::detail::vector<unsigned char, 128u>::extract<64u>(unsigned int) const",
            "StackSize": 344,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<unsigned char, 64u>::cast_to<short>() const",
            "StackSize": 472,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::operator[](unsigned int)",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_elem_ref<short, 32u>::operator short() const",
            "StackSize": 84,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::adf::stream_out_helper<4u, int, (aie_stream_resource_out)0>::writeincr(output_stream<int>*, aie::detail::vector<int, 4u>)",
            "StackSize": 236,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::broadcast_bits<8u, unsigned char, 128u>::run(unsigned char const&)",
            "StackSize": 1480,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_bits_impl<(aie::detail::CmpOp)3, 8u, unsigned char, 64u>::run(aie::detail::vector<unsigned char, 64u> const&, aie::detail::vector<unsigned char, 64u> const&)",
            "StackSize": 1753,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::vector()",
            "StackSize": 132,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<short, 32u>::type aie::detail::vector_cast_helper<short, 32u, v64uint8 const&>(v64uint8 const&)",
            "StackSize": 268,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u> aie::detail::zeros<unsigned char, 128u>()",
            "StackSize": 1024,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::operator~() const",
            "StackSize": 45,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<unsigned int, 4u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::count_word(unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v8cint32(v64uint8)",
            "StackSize": 200,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::add_sub_bits<8u, unsigned char, 128u, (aie::detail::AddSubOperation)0>::run(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2989,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<cint32, 16u>::type aie::detail::vector_cast_helper<cint32, 16u, std::__2::array<v64uint8, 2u> const&>(std::__2::array<v64uint8, 2u> const&)",
            "StackSize": 204,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v4int32()",
            "StackSize": 16,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u>::vector()",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "v8int16 readincr_v8<(aie_stream_resource_in)0>(input_stream<short>*)",
            "StackSize": 143,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 8u>::vector(v8int16)",
            "StackSize": 20,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>::vector(v64uint8)",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u>& aie::detail::vector<unsigned char, 128u>::insert<16u>(unsigned int, aie::detail::vector<unsigned char, 16u> const&)",
            "StackSize": 1548,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 128u>::undef()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "v8int16 stream_utils::aie_stream_get_wss<short>(input_stream<short>*)",
            "StackSize": 123,
            "SoftFloat": false
        },
        {
            "FunctionName": "upd_v(v64uint8, int, v16uint8)",
            "StackSize": 148,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v64uint8, 2u>::operator[](unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 8u>::vector()",
            "StackSize": 132,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u> aie::detail::vector<unsigned char, 16u>::grow<64u>(unsigned int) const",
            "StackSize": 336,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<unsigned char, 64u>::cast_to<cint32>() const",
            "StackSize": 472,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<unsigned char, 128u>::cast_to<cint32>() const",
            "StackSize": 600,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 8u> aie::detail::vector<cint32, 16u>::extract<8u>(unsigned int) const",
            "StackSize": 344,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 8u>::operator v8cint32() const",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "select8(unsigned int, v8cint32, int, unsigned int, v8cint32, int, unsigned int)",
            "StackSize": 212,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 8u>::vector(v8cint32)",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<cint32, 8u>::cast_to<unsigned char>() const",
            "StackSize": 472,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>::operator v64uint8() const",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector_cast<unsigned char, short, 8u>(aie::detail::vector<short, 8u> const&)",
            "StackSize": 156,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v64uint8()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "get_wss(int)",
            "StackSize": 103,
            "SoftFloat": false
        },
        {
            "FunctionName": "getl_wss(int)",
            "StackSize": 67,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v8int16(v4int32)",
            "StackSize": 56,
            "SoftFloat": false
        },
        {
            "FunctionName": "v8int16::v8int16(chessllvmInternal, v16int8)",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "uint1_t::uint1_t(int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 16u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<cint32, 8u>::undef()",
            "StackSize": 128,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>::vector()",
            "StackSize": 132,
            "SoftFloat": false
        },
        {
            "FunctionName": "xset_v(int, v16uint8)",
            "StackSize": 84,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<cint32, 8u>::type aie::detail::vector_cast_helper<cint32, 8u, v64uint8 const&>(v64uint8 const&)",
            "StackSize": 268,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 16u>::vector()",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "shft_elem(v32int16, int)",
            "StackSize": 132,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v8cint32, 2u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<cint32, 8u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 64u>::type aie::detail::vector_cast_helper<unsigned char, 64u, v8cint32 const&>(v8cint32 const&)",
            "StackSize": 268,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v8cint32()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 64u>::undef()",
            "StackSize": 128,
            "SoftFloat": false
        },
        {
            "FunctionName": "v8cint32::v8cint32(chessllvmInternal, v64int8)",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<cint32, 16u>::undef()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v64uint8, 2u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v64uint8(v8cint32)",
            "StackSize": 200,
            "SoftFloat": false
        },
        {
            "FunctionName": "v64uint8::v64uint8(chessllvmInternal, v64int8)",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<short, 8u>::cast_to<unsigned char>() const",
            "StackSize": 136,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 16u>::vector()",
            "StackSize": 36,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 16u>::type aie::detail::vector_cast_helper<unsigned char, 16u, v8int16 const&>(v8int16 const&)",
            "StackSize": 76,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 16u>::undef()",
            "StackSize": 32,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v16uint8(v8int16)",
            "StackSize": 56,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v16uint8()",
            "StackSize": 16,
            "SoftFloat": false
        },
        {
            "FunctionName": "v16uint8::v16uint8(chessllvmInternal, v16int8)",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v32uint8()",
            "StackSize": 32,
            "SoftFloat": false
        },
        {
            "FunctionName": "v32uint8::v32uint8(chessllvmInternal, v32int8)",
            "StackSize": 40,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u>, false, false>(aie::detail::vector<short, 32u>&&, aie::detail::vector<short, 32u>&&)",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_impl<std::__2::__tuple_indices<0u, 1u>, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >::__tuple_impl<0u, 1u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u>, , , aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(std::__2::__tuple_indices<0u, 1u>, std::__2::__tuple_types<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >, std::__2::__tuple_indices<>, std::__2::__tuple_types<>, aie::detail::vector<short, 32u>&&, aie::detail::vector<short, 32u>&&)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<short, 32u>, false>::__tuple_leaf<aie::detail::vector<short, 32u>, void>(aie::detail::vector<short, 32u>&&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<short, 32u>, false>::__tuple_leaf<aie::detail::vector<short, 32u>, void>(aie::detail::vector<short, 32u>&&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u>::vector(v32uint8)",
            "StackSize": 36,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::elem_ref(unsigned int)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_elem_ref<short, 32u>::get() const",
            "StackSize": 80,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<short, 32u>::undef()",
            "StackSize": 128,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v32int16(v64uint8)",
            "StackSize": 200,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v32int16()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "v32int16::v32int16(chessllvmInternal, v64int8)",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_elem_ref<short, 32u>::vector_elem_ref(aie::detail::vector<short, 32u>&, unsigned int)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::get(unsigned int) const",
            "StackSize": 76,
            "SoftFloat": false
        },
        {
            "FunctionName": "me_primitive::unpack(v32uint8, uint1_t)",
            "StackSize": 97,
            "SoftFloat": false
        },
        {
            "FunctionName": "ext_elem(v32int16, unsigned int)",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 4u> aie::detail::vector<int, 4u>::extract<4u>(unsigned int) const",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 4u>::operator v4int32() const",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "void writeincr<(aie_stream_resource_out)0>(output_stream<int>*, v4int32, bool)",
            "StackSize": 180,
            "SoftFloat": false
        },
        {
            "FunctionName": "void writeincr<(aie_stream_resource_out)0>(output_stream<short>*, v8int16, bool)",
            "StackSize": 143,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 4u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "void stream_utils::aie_stream_put_wms<short>(output_stream<short>*, v8int16, bool&)",
            "StackSize": 122,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>::unpack() const",
            "StackSize": 1481,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_impl<(aie::detail::CmpOp)3, short, 64u>::run(aie::detail::vector<short, 64u> const&, aie::detail::vector<short, 64u> const&)",
            "StackSize": 1152,
            "SoftFloat": false
        },
        {
            "FunctionName": "put_wms(int, v8int16, int)",
            "StackSize": 98,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v4int32(v8int16)",
            "StackSize": 56,
            "SoftFloat": false
        },
        {
            "FunctionName": "put_wms(int, v4int32, int)",
            "StackSize": 58,
            "SoftFloat": false
        },
        {
            "FunctionName": "me_primitive::stream_write128(int __protect_access AS23*, v4int32, uint1_t, v4int32)",
            "StackSize": 22,
            "SoftFloat": false
        },
        {
            "FunctionName": "me_primitive::stream_write128(int __protect_access AS24*, v4int32, uint1_t, v4int32)",
            "StackSize": 22,
            "SoftFloat": false
        },
        {
            "FunctionName": "me_primitive::stream_write128(int __protect_access AS12*, v4int32, uint1_t, v4int32)",
            "StackSize": 22,
            "SoftFloat": false
        },
        {
            "FunctionName": "v4int32::v4int32(chessllvmInternal, v16int8)",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::broadcast_bits_impl<8u, unsigned char, 128u>::run(unsigned char const&)",
            "StackSize": 1476,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::utils::pack2<unsigned char>::pack2(unsigned char, unsigned char)",
            "StackSize": 6,
            "SoftFloat": false
        },
        {
            "FunctionName": "short aie::detail::utils::pack2<unsigned char>::as<short>() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::broadcast_bits_impl<16u, short, 64u>::run(short const&)",
            "StackSize": 1340,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector_cast<unsigned char, short, 64u>(aie::detail::vector<short, 64u> const&)",
            "StackSize": 604,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<short, 64u>::cast_to<unsigned char>() const",
            "StackSize": 600,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 64u>::vector()",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::broadcast_bits_impl<16u, short, 32u>::run(short const&)",
            "StackSize": 1012,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::concat_vector<aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&>(aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 476,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 128u>::type aie::detail::vector_cast_helper<unsigned char, 128u, std::__2::array<v32int16, 2u> const&>(std::__2::array<v32int16, 2u> const&)",
            "StackSize": 204,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v32int16, 2u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v64uint8(v32int16)",
            "StackSize": 200,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<short, 64u>::undef()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::vector<>(short)",
            "StackSize": 218,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::operator[](unsigned int) const",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u> aie::detail::broadcast_bits_impl<16u, short, 32u>::run<32u>(aie::detail::vector_elem_const_ref<short, 32u>)",
            "StackSize": 676,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u> const& std::__2::forward<aie::detail::vector<short, 32u> const&>(std::__2::remove_reference<aie::detail::vector<short, 32u> const&>::type&)",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::concat_vector_helper<short, 32u>::run<aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&>(aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 468,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::vector<short, 32u>::init_from_values_simple<v32int16, , short>(v32int16&, short const&)",
            "StackSize": 208,
            "SoftFloat": false
        },
        {
            "FunctionName": "shuffle32(v32int16, int, unsigned int, unsigned int, unsigned int)",
            "StackSize": 144,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u> aie::detail::vector<short, 32u>::grow<32u>(unsigned int) const",
            "StackSize": 272,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::operator v32int16() const",
            "StackSize": 72,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::vector(v32int16)",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u> aie::detail::vector<short, 32u>::extract<32u>(unsigned int) const",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::elem_const_ref(unsigned int) const",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<short, 32u>, false>::get()",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "concat(v32uint8, v32uint8)",
            "StackSize": 128,
            "SoftFloat": false
        },
        {
            "FunctionName": "upack(v32int16)",
            "StackSize": 197,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_elem_const_ref<short, 32u>::vector_elem_const_ref(aie::detail::vector<short, 32u> const&, unsigned int)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u>, false, false>(aie::detail::vector<unsigned char, 32u>&&, aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 64u>& aie::detail::vector<short, 64u>::upd_all<aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&>(aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 204,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<std::__2::__unwrap_ref_decay<aie::detail::vector<short, 32u> const&>::type, std::__2::__unwrap_ref_decay<aie::detail::vector<short, 32u> const&>::type> std::__2::make_tuple<aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&>(aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 52,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v32int16, 2u>::operator[](unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<0u, std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > >::type const& std::__2::get<0u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<1u, std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > >::type const& std::__2::get<1u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >::tuple<true, false>(aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<short, 32u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<short, 32u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_impl<std::__2::__tuple_indices<0u, 1u>, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >::__tuple_impl<0u, 1u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u>, , , aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&>(std::__2::__tuple_indices<0u, 1u>, std::__2::__tuple_types<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >, std::__2::__tuple_indices<>, std::__2::__tuple_types<>, aie::detail::vector<short, 32u> const&, aie::detail::vector<short, 32u> const&)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<short, 32u>, false>::__tuple_leaf<aie::detail::vector<short, 32u> const&, void>(aie::detail::vector<short, 32u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<short, 32u>, false>::__tuple_leaf<aie::detail::vector<short, 32u> const&, void>(aie::detail::vector<short, 32u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 8u>::vector(v8int32)",
            "StackSize": 36,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::concat_vector<aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&>(aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 832,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector_cast<unsigned char, int, 32u>(aie::detail::vector<int, 32u> const&)",
            "StackSize": 604,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<int, 32u>::cast_to<unsigned char>() const",
            "StackSize": 600,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 8u> const& std::__2::forward<aie::detail::vector<int, 8u> const&>(std::__2::remove_reference<aie::detail::vector<int, 8u> const&>::type&)",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::concat_vector_helper<int, 8u>::run<aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&>(aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 816,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 128u>::type aie::detail::vector_cast_helper<unsigned char, 128u, std::__2::array<v16int32, 2u> const&>(std::__2::array<v16int32, 2u> const&)",
            "StackSize": 204,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v16int32, 2u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v64uint8(v16int32)",
            "StackSize": 200,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 32u>::vector()",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 32u>& aie::detail::vector<int, 32u>::upd_all<aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&>(aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 544,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<int, 32u>::undef()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<std::__2::__unwrap_ref_decay<aie::detail::vector<int, 8u> const&>::type, std::__2::__unwrap_ref_decay<aie::detail::vector<int, 8u> const&>::type, std::__2::__unwrap_ref_decay<aie::detail::vector<int, 8u> const&>::type, std::__2::__unwrap_ref_decay<aie::detail::vector<int, 8u> const&>::type> std::__2::make_tuple<aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&>(aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 76,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<v16int32, 2u>::operator[](unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<0u, std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > >::type const& std::__2::get<0u, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >(std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 8u>::operator v8int32() const",
            "StackSize": 40,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<1u, std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > >::type const& std::__2::get<1u, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >(std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "concat(v8int32, v8int32)",
            "StackSize": 128,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<2u, std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > >::type const& std::__2::get<2u, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >(std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<3u, std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > >::type const& std::__2::get<3u, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >(std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> > const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "undef_v16int32()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >::tuple<true, false>(aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 60,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<int, 8u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<int, 8u>::to_native() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<int, 8u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<2u, aie::detail::vector<int, 8u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<3u, aie::detail::vector<int, 8u>, false>::get() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_impl<std::__2::__tuple_indices<0u, 1u, 2u, 3u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >::__tuple_impl<0u, 1u, 2u, 3u, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, , , aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&>(std::__2::__tuple_indices<0u, 1u, 2u, 3u>, std::__2::__tuple_types<aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u>, aie::detail::vector<int, 8u> >, std::__2::__tuple_indices<>, std::__2::__tuple_types<>, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&, aie::detail::vector<int, 8u> const&)",
            "StackSize": 36,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<int, 8u>, false>::__tuple_leaf<aie::detail::vector<int, 8u> const&, void>(aie::detail::vector<int, 8u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<3u, aie::detail::vector<int, 8u>, false>::__tuple_leaf<aie::detail::vector<int, 8u> const&, void>(aie::detail::vector<int, 8u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<int, 8u>, false>::__tuple_leaf<aie::detail::vector<int, 8u> const&, void>(aie::detail::vector<int, 8u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<2u, aie::detail::vector<int, 8u>, false>::__tuple_leaf<aie::detail::vector<int, 8u> const&, void>(aie::detail::vector<int, 8u> const&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_impl<(aie::detail::CmpOp)3, unsigned char, 128u>::run(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2089,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_bits_impl<(aie::detail::CmpOp)3, 8u, unsigned char, 128u>::run(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2065,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_impl<(aie::detail::CmpOp)3, unsigned char, 64u>::run(aie::detail::vector<unsigned char, 64u> const&, aie::detail::vector<unsigned char, 64u> const&)",
            "StackSize": 1769,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<64u>::data() const",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<unsigned int, 2u>::operator[](unsigned int) const",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<128u>::mask<unsigned int const&, unsigned int const&, unsigned int const&>(unsigned int, unsigned int const&, unsigned int const&, unsigned int const&)",
            "StackSize": 84,
            "SoftFloat": false
        },
        {
            "FunctionName": "unsigned int const& std::__2::forward<unsigned int const&>(std::__2::remove_reference<unsigned int const&>::type&)",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<128u>::init_from_words<0u, unsigned int const&, unsigned int const&, unsigned int const&>(unsigned int, unsigned int const&, unsigned int const&, unsigned int const&)",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<unsigned char, 64u>::split<32u>() const",
            "StackSize": 1149,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<0u, std::__2::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> > >::type&& std::__2::get<0u, aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >(std::__2::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >&&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<1u, std::__2::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> > >::type&& std::__2::get<1u, aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >(std::__2::tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >&&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u>::unpack() const",
            "StackSize": 391,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 64u>& aie::detail::vector<short, 64u>::upd_all<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(aie::detail::vector<short, 32u>&&, aie::detail::vector<short, 32u>&&)",
            "StackSize": 204,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::cmp_bits_impl<(aie::detail::CmpOp)3, 16u, short, 64u>::run(aie::detail::vector<short, 64u> const&, aie::detail::vector<short, 64u> const&)",
            "StackSize": 1136,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<unsigned char, 64u>::split_helper<32u, 0u, 1u>(std::__2::integer_sequence<unsigned int, 0u, 1u>&&) const",
            "StackSize": 1140,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<unsigned char, 32u>, false>::get()",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<unsigned char, 32u>, false>::get()",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u>&& std::__2::forward<aie::detail::vector<short, 32u> >(std::__2::remove_reference<aie::detail::vector<short, 32u> >::type&)",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<std::__2::__unwrap_ref_decay<aie::detail::vector<short, 32u> >::type, std::__2::__unwrap_ref_decay<aie::detail::vector<short, 32u> >::type> std::__2::make_tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(aie::detail::vector<short, 32u>&&, aie::detail::vector<short, 32u>&&)",
            "StackSize": 52,
            "SoftFloat": false
        },
        {
            "FunctionName": "unpack(v32uint8)",
            "StackSize": 195,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u> aie::detail::vector<unsigned char, 64u>::extract<32u>(unsigned int) const",
            "StackSize": 1068,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple<std::__2::__unwrap_ref_decay<aie::detail::vector<unsigned char, 32u> >::type, std::__2::__unwrap_ref_decay<aie::detail::vector<unsigned char, 32u> >::type> std::__2::make_tuple<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >(aie::detail::vector<unsigned char, 32u>&&, aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 52,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u>&& std::__2::forward<aie::detail::vector<unsigned char, 32u> >(std::__2::remove_reference<aie::detail::vector<unsigned char, 32u> >::type&)",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u>::vector()",
            "StackSize": 68,
            "SoftFloat": false
        },
        {
            "FunctionName": "ext_w(v64uint8, int)",
            "StackSize": 100,
            "SoftFloat": false
        },
        {
            "FunctionName": "shuffle8(v8cint32, int, unsigned int)",
            "StackSize": 136,
            "SoftFloat": false
        },
        {
            "FunctionName": "ext_w(v8cint32, int)",
            "StackSize": 100,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 32u>::type aie::detail::vector_cast_helper<unsigned char, 32u, v4cint32>(v4cint32&&)",
            "StackSize": 140,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_impl<std::__2::__tuple_indices<0u, 1u>, aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >::__tuple_impl<0u, 1u, aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u>, , , aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >(std::__2::__tuple_indices<0u, 1u>, std::__2::__tuple_types<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >, std::__2::__tuple_indices<>, std::__2::__tuple_types<>, aie::detail::vector<unsigned char, 32u>&&, aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<unsigned char, 32u>, false>::__tuple_leaf<aie::detail::vector<unsigned char, 32u>, void>(aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<1u, aie::detail::vector<unsigned char, 32u>, false>::__tuple_leaf<aie::detail::vector<unsigned char, 32u>, void>(aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 12,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector_storage<unsigned char, 32u>::undef()",
            "StackSize": 64,
            "SoftFloat": false
        },
        {
            "FunctionName": "as_v32uint8(v4cint32)",
            "StackSize": 104,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 32u> aie::detail::vector<short, 64u>::extract<32u>(unsigned int) const",
            "StackSize": 344,
            "SoftFloat": false
        },
        {
            "FunctionName": "concat(v32int16, v32int16)",
            "StackSize": 256,
            "SoftFloat": false
        },
        {
            "FunctionName": "lt32(v64int16, int, unsigned int, unsigned int, unsigned int, int, unsigned int, unsigned int, unsigned int)",
            "StackSize": 160,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::mask<64u>::mask<unsigned int const&>(unsigned int, unsigned int const&)",
            "StackSize": 40,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<64u>::init_from_words<0u, unsigned int const&>(unsigned int, unsigned int const&)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::array<unsigned int, 2u>::operator[](unsigned int)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<64u>::init_from_words<1u>(unsigned int)",
            "StackSize": 16,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<128u>::init_from_words<1u, unsigned int const&, unsigned int const&>(unsigned int, unsigned int const&, unsigned int const&)",
            "StackSize": 44,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<128u>::init_from_words<2u, unsigned int const&>(unsigned int, unsigned int const&)",
            "StackSize": 28,
            "SoftFloat": false
        },
        {
            "FunctionName": "void aie::detail::mask<128u>::init_from_words<3u>(unsigned int)",
            "StackSize": 16,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::add_sub_bits_impl<8u, unsigned char, 128u, (aie::detail::AddSubOperation)0>::run(aie::detail::vector<unsigned char, 128u> const&, aie::detail::vector<unsigned char, 128u> const&)",
            "StackSize": 2981,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::add_sub_bits_impl<8u, unsigned char, 64u, (aie::detail::AddSubOperation)0>::run(aie::detail::vector<unsigned char, 64u> const&, aie::detail::vector<unsigned char, 64u> const&)",
            "StackSize": 2461,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 128u>& aie::detail::vector<unsigned char, 128u>::insert<64u>(unsigned int, aie::detail::vector<unsigned char, 64u> const&)",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::add_sub_bits_impl<16u, short, 64u, (aie::detail::AddSubOperation)0>::run(aie::detail::vector<short, 64u> const&, aie::detail::vector<short, 64u> const&)",
            "StackSize": 2005,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u> aie::detail::vector<short, 64u>::pack<unsigned char>() const",
            "StackSize": 821,
            "SoftFloat": false
        },
        {
            "FunctionName": "bool aie::detail::utils::is_same_object<aie::detail::vector<short, 64u>, aie::detail::vector<short, 64u> >(aie::detail::vector<short, 64u> const&, aie::detail::vector<short, 64u> const&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<short, 64u>& aie::detail::vector<short, 64u>::insert<32u>(unsigned int, aie::detail::vector<short, 32u> const&)",
            "StackSize": 24,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<short, 64u>::split<32u>() const",
            "StackSize": 489,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<0u, std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > >::type&& std::__2::get<0u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >&&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::tuple_element<1u, std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> > >::type&& std::__2::get<1u, aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >(std::__2::tuple<aie::detail::vector<short, 32u>, aie::detail::vector<short, 32u> >&&)",
            "StackSize": 8,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 32u> aie::detail::vector<short, 32u>::pack<unsigned char>() const",
            "StackSize": 297,
            "SoftFloat": false
        },
        {
            "FunctionName": "aie::detail::vector<unsigned char, 64u>& aie::detail::vector<unsigned char, 64u>::upd_all<aie::detail::vector<unsigned char, 32u>, aie::detail::vector<unsigned char, 32u> >(aie::detail::vector<unsigned char, 32u>&&, aie::detail::vector<unsigned char, 32u>&&)",
            "StackSize": 216,
            "SoftFloat": false
        },
        {
            "FunctionName": "add32(v32int16, int, unsigned int, unsigned int, unsigned int, int, unsigned int, unsigned int, unsigned int)",
            "StackSize": 160,
            "SoftFloat": false
        },
        {
            "FunctionName": "add32(v32int16, v32int16)",
            "StackSize": 576,
            "SoftFloat": false
        },
        {
            "FunctionName": "add32(v64int16, int, unsigned int, unsigned int, unsigned int, int, unsigned int, unsigned int, unsigned int)",
            "StackSize": 224,
            "SoftFloat": false
        },
        {
            "FunctionName": "auto aie::detail::vector<short, 64u>::split_helper<32u, 0u, 1u>(std::__2::integer_sequence<unsigned int, 0u, 1u>&&) const",
            "StackSize": 480,
            "SoftFloat": false
        },
        {
            "FunctionName": "std::__2::__tuple_leaf<0u, aie::detail::vector<short, 32u>, false>::get()",
            "StackSize": 4,
            "SoftFloat": false
        },
        {
            "FunctionName": "get_sat_impl()",
            "StackSize": 0,
            "SoftFloat": false
        },
        {
            "FunctionName": "me_primitive::upack(v32int16, uint1_t, uint1_t)",
            "StackSize": 98,
            "SoftFloat": false
        }
    ]
}