-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sink_from_aie_sink_from_aie_Pipeline_VITIS_LOOP_78_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_stream_TREADY : OUT STD_LOGIC;
    joint_address0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    joint_ce0 : OUT STD_LOGIC;
    joint_we0 : OUT STD_LOGIC;
    joint_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    joint_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h2_ce0 : OUT STD_LOGIC;
    h2_we0 : OUT STD_LOGIC;
    h2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    h2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    h1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    h1_ce0 : OUT STD_LOGIC;
    h1_we0 : OUT STD_LOGIC;
    h1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    h1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of sink_from_aie_sink_from_aie_Pipeline_VITIS_LOOP_78_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFC18 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110000011000";
    constant ap_const_lv32_FFFFFC17 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110000010111";
    constant ap_const_lv32_FFFFFB2E : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111101100101110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln82_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln82_reg_210 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op45_read_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal input_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_201 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_fu_52_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_97 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_predicate_op38_read_state3 : BOOLEAN;
    signal ap_predicate_op41_read_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal trunc_ln82_fu_106_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln82_reg_205 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_116_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal joint_addr_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_predicate_op24_read_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal h2_addr_reg_223 : STD_LOGIC_VECTOR (7 downto 0);
    signal h1_addr_reg_228 : STD_LOGIC_VECTOR (7 downto 0);
    signal joint_load_reg_233 : STD_LOGIC_VECTOR (31 downto 0);
    signal h2_load_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal h1_load_reg_243 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln89_1_fu_162_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln89_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_129_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal tmp_1_fu_140_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln89_fu_152_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln89_1_fu_156_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_105 : BOOLEAN;
    signal ap_condition_168 : BOOLEAN;
    signal ap_condition_269 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component sink_from_aie_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component sink_from_aie_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_269)) then
                if ((ap_const_boolean_1 = ap_condition_168)) then 
                    i_fu_48 <= i_2_fu_129_p2;
                elsif (((icmp_ln82_fu_110_p2 = ap_const_lv1_0) and (tmp_fu_116_p3 = ap_const_lv1_0))) then 
                    i_fu_48 <= input_stream_TDATA;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_48 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                h1_addr_reg_228 <= zext_ln98_fu_170_p1(8 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                h1_load_reg_243 <= h1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                h2_addr_reg_223 <= zext_ln89_fu_147_p1(8 - 1 downto 0);
                joint_addr_reg_218 <= zext_ln89_1_fu_162_p1(16 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                h2_load_reg_238 <= h2_q0;
                joint_load_reg_233 <= joint_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_1_reg_201 <= input_stream_TDATA;
                icmp_ln82_reg_210 <= icmp_ln82_fu_110_p2;
                trunc_ln82_reg_205 <= trunc_ln82_fu_106_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or (not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) then
                reg_97 <= input_stream_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (icmp_ln82_fu_110_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                tmp_reg_214 <= input_stream_TDATA(31 downto 31);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, input_stream_TVALID, icmp_ln82_fu_110_p2, ap_CS_fsm_state4, ap_predicate_op45_read_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_predicate_op38_read_state3, ap_predicate_op41_read_state3, ap_predicate_op24_read_state2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (icmp_ln82_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln89_1_fu_156_p2 <= std_logic_vector(unsigned(tmp_1_fu_140_p3) + unsigned(trunc_ln89_fu_152_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(input_stream_TVALID, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(input_stream_TVALID, ap_predicate_op24_read_state2)
    begin
        if (((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(input_stream_TVALID, ap_predicate_op38_read_state3, ap_predicate_op41_read_state3)
    begin
        if ((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(input_stream_TVALID, ap_predicate_op45_read_state4)
    begin
        if (((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_stream_TVALID, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(input_stream_TVALID, ap_predicate_op24_read_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(input_stream_TVALID, ap_predicate_op38_read_state3, ap_predicate_op41_read_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(input_stream_TVALID, ap_predicate_op45_read_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0));
    end process;


    ap_condition_105_assign_proc : process(icmp_ln82_reg_210, tmp_reg_214, i_1_reg_201)
    begin
                ap_condition_105 <= (not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0));
    end process;


    ap_condition_168_assign_proc : process(icmp_ln82_fu_110_p2, grp_read_fu_52_p2, tmp_fu_116_p3)
    begin
                ap_condition_168 <= (not((grp_read_fu_52_p2 = ap_const_lv32_FFFFFC17)) and not((grp_read_fu_52_p2 = ap_const_lv32_FFFFFC18)) and (icmp_ln82_fu_110_p2 = ap_const_lv1_0) and (tmp_fu_116_p3 = ap_const_lv1_1));
    end process;


    ap_condition_269_assign_proc : process(ap_CS_fsm_state1, input_stream_TVALID, ap_start_int)
    begin
                ap_condition_269 <= (not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, input_stream_TVALID, icmp_ln82_fu_110_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (icmp_ln82_fu_110_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, input_stream_TVALID, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);

    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_const_logic_1 and ap_const_logic_1);
    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op24_read_state2_assign_proc : process(icmp_ln82_reg_210, tmp_reg_214)
    begin
                ap_predicate_op24_read_state2 <= ((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0));
    end process;


    ap_predicate_op38_read_state3_assign_proc : process(icmp_ln82_reg_210, tmp_reg_214)
    begin
                ap_predicate_op38_read_state3 <= ((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0));
    end process;


    ap_predicate_op41_read_state3_assign_proc : process(icmp_ln82_reg_210, tmp_reg_214, i_1_reg_201)
    begin
                ap_predicate_op41_read_state3 <= (not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0));
    end process;


    ap_predicate_op45_read_state4_assign_proc : process(icmp_ln82_reg_210, tmp_reg_214)
    begin
                ap_predicate_op45_read_state4 <= ((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, ap_predicate_op45_read_state4)
    begin
        if ((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_cur_n <= (input_stream_TDATA_blk_n);
    ap_str_blocking_n <= (ap_str_blocking_cur_n and ap_const_logic_1);
    grp_read_fu_52_p2 <= input_stream_TDATA;

    h1_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state2, h1_addr_reg_228, zext_ln98_fu_170_p1, ap_condition_105)
    begin
        if ((ap_const_boolean_1 = ap_condition_105)) then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                h1_address0 <= h1_addr_reg_228;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h1_address0 <= zext_ln98_fu_170_p1(8 - 1 downto 0);
            else 
                h1_address0 <= "XXXXXXXX";
            end if;
        else 
            h1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    h1_ce0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4, ap_CS_fsm_state2, i_1_reg_201, ap_predicate_op24_read_state2)
    begin
        if (((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            h1_ce0 <= ap_const_logic_1;
        else 
            h1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h1_d0 <= std_logic_vector(unsigned(h1_load_reg_243) + unsigned(reg_97));

    h1_we0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4, i_1_reg_201)
    begin
        if ((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            h1_we0 <= ap_const_logic_1;
        else 
            h1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    h2_address0_assign_proc : process(ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_CS_fsm_state2, h2_addr_reg_223, zext_ln89_fu_147_p1)
    begin
        if (((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                h2_address0 <= h2_addr_reg_223;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                h2_address0 <= zext_ln89_fu_147_p1(8 - 1 downto 0);
            else 
                h2_address0 <= "XXXXXXXX";
            end if;
        else 
            h2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    h2_ce0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4, ap_CS_fsm_state2, ap_predicate_op24_read_state2)
    begin
        if (((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            h2_ce0 <= ap_const_logic_1;
        else 
            h2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    h2_d0 <= std_logic_vector(unsigned(h2_load_reg_238) + unsigned(input_stream_TDATA));

    h2_we0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4)
    begin
        if ((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            h2_we0 <= ap_const_logic_1;
        else 
            h2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_2_fu_129_p2 <= (input_stream_TDATA xor ap_const_lv32_FFFFFFFF);
    icmp_ln82_fu_110_p2 <= "1" when (input_stream_TDATA = ap_const_lv32_FFFFFB2E) else "0";

    input_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, i_1_reg_201, ap_start_int)
    begin
        if ((((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not((i_1_reg_201 = ap_const_lv32_FFFFFC18)) and (tmp_reg_214 = ap_const_lv1_1) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            input_stream_TDATA_blk_n <= input_stream_TVALID;
        else 
            input_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_stream_TREADY_assign_proc : process(ap_CS_fsm_state1, input_stream_TVALID, ap_CS_fsm_state4, ap_predicate_op45_read_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_predicate_op38_read_state3, ap_predicate_op41_read_state3, ap_predicate_op24_read_state2, ap_start_int)
    begin
        if (((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (ap_predicate_op45_read_state4 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((ap_start_int = ap_const_logic_0) or (input_stream_TVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and (ap_const_logic_1 = ap_CS_fsm_state2) and (ap_predicate_op24_read_state2 = ap_const_boolean_1)) or (not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or (not((((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op41_read_state3 = ap_const_boolean_1)) or ((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state3) and (ap_predicate_op38_read_state3 = ap_const_boolean_1)))) then 
            input_stream_TREADY <= ap_const_logic_1;
        else 
            input_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    joint_address0_assign_proc : process(ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_CS_fsm_state2, joint_addr_reg_218, zext_ln89_1_fu_162_p1)
    begin
        if (((tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0))) then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                joint_address0 <= joint_addr_reg_218;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                joint_address0 <= zext_ln89_1_fu_162_p1(16 - 1 downto 0);
            else 
                joint_address0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            joint_address0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    joint_ce0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4, ap_CS_fsm_state2, ap_predicate_op24_read_state2)
    begin
        if (((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((input_stream_TVALID = ap_const_logic_0) and (ap_predicate_op24_read_state2 = ap_const_boolean_1))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            joint_ce0 <= ap_const_logic_1;
        else 
            joint_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    joint_d0 <= std_logic_vector(unsigned(joint_load_reg_233) + unsigned(reg_97));

    joint_we0_assign_proc : process(input_stream_TVALID, ap_CS_fsm_state4, icmp_ln82_reg_210, tmp_reg_214, ap_predicate_op45_read_state4)
    begin
        if ((not(((ap_predicate_op45_read_state4 = ap_const_boolean_1) and (input_stream_TVALID = ap_const_logic_0))) and (tmp_reg_214 = ap_const_lv1_0) and (icmp_ln82_reg_210 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            joint_we0 <= ap_const_logic_1;
        else 
            joint_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_140_p3 <= (trunc_ln82_reg_205 & ap_const_lv8_0);
    tmp_fu_116_p3 <= input_stream_TDATA(31 downto 31);
    trunc_ln82_fu_106_p1 <= input_stream_TDATA(8 - 1 downto 0);
    trunc_ln89_fu_152_p1 <= input_stream_TDATA(16 - 1 downto 0);
    zext_ln89_1_fu_162_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln89_1_fu_156_p2),64));
    zext_ln89_fu_147_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_stream_TDATA),64));
    zext_ln98_fu_170_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_48),64));
end behav;
